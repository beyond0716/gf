{"version":3,"sources":["main.scss","mixins/_center-block.scss","mixins/_opacity.scss","_sprite.scss"],"names":[],"mappings":"AAIA;ECDE,eAAc;EACd,kBAAiB;EACjB,mBAAkB;ECFlB,YFGmB;EEAnB,4BAAkC;EFClC,0BAAuB;EACvB,gBAAe,EAChB;;AAED;EAAK,aAAY;EAAE,cAAa;EAAE,mDAAkD,EAAG;;AAEvF;EG4CE,kCAAuB;EALvB,+BAzCqC;EA+BrC,YA/B2C;EAmC3C,aAnCiD,EHIlD;;AG2DG;EAjBF,kCAAuB;EALvB,+BAzCqC;EA+BrC,YA/B2C;EAmC3C,aAnCiD,EAiE9C;;AAFD;EAjBF,kCAAuB;EALvB,6BAxCoC;EA8BpC,YA9B0C;EAkC1C,aAlCgD,EAgE7C;;AAFD;EAjBF,kCAAuB;EALvB,gCAvCuC;EA6BvC,YA7B6C;EAiC7C,aAjCmD,EA+DhD","file":"../main.css","sourcesContent":["@import \"variables\";\n@import \"mixins\";\n@import \"sprite\";\n\n.center{\n  @include center-block;\n  @include opacity(50);\n  color:  rgba(0,0,0,0.2);\n  font-size: 30px;\n}\n\n.box{width: 300px;height: 300px;background: url(\"../img/sprite.png\") 0 0 no-repeat;}\n\n.gfff{\n  @include sprite($share-qz);\n}\n\n@include sprites($spritesheet-sprites)","// Center-align a block level element\n\n@mixin center-block() {\n  display: block;\n  margin-left: auto;\n  margin-right: auto;\n}\n","// Opacity\n\n@mixin opacity($opacity) {\n  opacity: $opacity;\n  // IE8 filter\n  $opacity-ie: ($opacity * 100);\n  filter: alpha(opacity=$opacity-ie);\n}\n","// SCSS variables are information about icon's compiled state, stored under its original file name\n//\n// .icon-home {\n//   width: $icon-home-width;\n// }\n//\n// The large array-like variables contain all information about a single icon\n// $icon-home: x y offset_x offset_y width height total_width total_height image_path;\n//\n// At the bottom of this section, we provide information about the spritesheet itself\n// $spritesheet: width height image $spritesheet-sprites;\n      $share-qz: (81px, 0px, -81px, 0px, 80px, 80px, 242px, 81px, 'sprite.png', 'share_qz', );\r\n      $share-sina: (0px, 0px, 0px, 0px, 80px, 81px, 242px, 81px, 'sprite.png', 'share_sina', );\r\n      $share-wx: (162px, 0px, -162px, 0px, 80px, 80px, 242px, 81px, 'sprite.png', 'share_wx', );\r\n    $spritesheet-sprites: ($share-qz, $share-sina, $share-wx, );\r\n    $spritesheet: (242px, 81px, 'sprite.png', $spritesheet-sprites, );\r\n\n// The provided mixins are intended to be used with the array-like variables\n//\n// .icon-home {\n//   @include sprite-width($icon-home);\n// }\n//\n// .icon-email {\n//   @include sprite($icon-email);\n// }\n//\n// Example usage in HTML:\n//\n// `display: block` sprite:\n// <div class=\"icon-home\"></div>\n//\n// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:\n//\n// // CSS\n// .icon {\n//   display: inline-block;\n// }\n//\n// // HTML\n// <i class=\"icon icon-home\"></i>\n@mixin sprite-width($sprite) {\n  width: nth($sprite, 5);\n}\n\n@mixin sprite-height($sprite) {\n  height: nth($sprite, 6);\n}\n\n@mixin sprite-position($sprite) {\n  $sprite-offset-x: nth($sprite, 3);\n  $sprite-offset-y: nth($sprite, 4);\n  background-position: $sprite-offset-x  $sprite-offset-y;\n}\n\n@mixin sprite-image($sprite) {\n  $sprite-image: nth($sprite, 9);\n  background-image: url(#{$sprite-image});\n}\n\n@mixin sprite($sprite) {\n  @include sprite-image($sprite);\n  @include sprite-position($sprite);\n  @include sprite-width($sprite);\n  @include sprite-height($sprite);\n}\n\n// The `sprites` mixin generates identical output to the CSS template\n//   but can be overridden inside of SCSS\n//\n// @include sprites($spritesheet-sprites);\n@mixin sprites($sprites) {\n  @each $sprite in $sprites {\n    $sprite-name: nth($sprite, 10);\n    .#{$sprite-name} {\n      @include sprite($sprite);\n    }\n  }\n}\n"]}